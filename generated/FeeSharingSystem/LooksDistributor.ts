// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Compound extends ethereum.Event {
  get params(): Compound__Params {
    return new Compound__Params(this);
  }
}

export class Compound__Params {
  _event: Compound;

  constructor(event: Compound) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get harvestedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get harvestedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewRewardsPerBlock extends ethereum.Event {
  get params(): NewRewardsPerBlock__Params {
    return new NewRewardsPerBlock__Params(this);
  }
}

export class NewRewardsPerBlock__Params {
  _event: NewRewardsPerBlock;

  constructor(event: NewRewardsPerBlock) {
    this._event = event;
  }

  get currentPhase(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get startBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rewardPerBlockForStaking(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rewardPerBlockForOthers(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get harvestedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LooksDistributor__stakingPeriodResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class LooksDistributor__userInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LooksDistributor extends ethereum.SmartContract {
  static bind(address: Address): LooksDistributor {
    return new LooksDistributor("LooksDistributor", address);
  }

  NUMBER_PERIODS(): BigInt {
    let result = super.call("NUMBER_PERIODS", "NUMBER_PERIODS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_NUMBER_PERIODS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NUMBER_PERIODS",
      "NUMBER_PERIODS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION_FACTOR(): BigInt {
    let result = super.call(
      "PRECISION_FACTOR",
      "PRECISION_FACTOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PRECISION_FACTOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRECISION_FACTOR",
      "PRECISION_FACTOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  START_BLOCK(): BigInt {
    let result = super.call("START_BLOCK", "START_BLOCK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_START_BLOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("START_BLOCK", "START_BLOCK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accTokenPerShare(): BigInt {
    let result = super.call(
      "accTokenPerShare",
      "accTokenPerShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accTokenPerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accTokenPerShare",
      "accTokenPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePendingRewards(user: Address): BigInt {
    let result = super.call(
      "calculatePendingRewards",
      "calculatePendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_calculatePendingRewards(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePendingRewards",
      "calculatePendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentPhase(): BigInt {
    let result = super.call("currentPhase", "currentPhase():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentPhase(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentPhase", "currentPhase():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endBlock(): BigInt {
    let result = super.call("endBlock", "endBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("endBlock", "endBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardBlock(): BigInt {
    let result = super.call(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  looksRareToken(): Address {
    let result = super.call("looksRareToken", "looksRareToken():(address)", []);

    return result[0].toAddress();
  }

  try_looksRareToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "looksRareToken",
      "looksRareToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardPerBlockForOthers(): BigInt {
    let result = super.call(
      "rewardPerBlockForOthers",
      "rewardPerBlockForOthers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerBlockForOthers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerBlockForOthers",
      "rewardPerBlockForOthers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardPerBlockForStaking(): BigInt {
    let result = super.call(
      "rewardPerBlockForStaking",
      "rewardPerBlockForStaking():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardPerBlockForStaking(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardPerBlockForStaking",
      "rewardPerBlockForStaking():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingPeriod(param0: BigInt): LooksDistributor__stakingPeriodResult {
    let result = super.call(
      "stakingPeriod",
      "stakingPeriod(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LooksDistributor__stakingPeriodResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_stakingPeriod(
    param0: BigInt
  ): ethereum.CallResult<LooksDistributor__stakingPeriodResult> {
    let result = super.tryCall(
      "stakingPeriod",
      "stakingPeriod(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LooksDistributor__stakingPeriodResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tokenSplitter(): Address {
    let result = super.call("tokenSplitter", "tokenSplitter():(address)", []);

    return result[0].toAddress();
  }

  try_tokenSplitter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenSplitter",
      "tokenSplitter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalAmountStaked(): BigInt {
    let result = super.call(
      "totalAmountStaked",
      "totalAmountStaked():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAmountStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAmountStaked",
      "totalAmountStaked():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): LooksDistributor__userInfoResult {
    let result = super.call("userInfo", "userInfo(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new LooksDistributor__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userInfo(
    param0: Address
  ): ethereum.CallResult<LooksDistributor__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LooksDistributor__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _looksRareToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenSplitter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _startBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _rewardsPerBlockForStaking(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _rewardsPerBlockForOthers(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _periodLengthesInBlocks(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _numberPeriods(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class HarvestAndCompoundCall extends ethereum.Call {
  get inputs(): HarvestAndCompoundCall__Inputs {
    return new HarvestAndCompoundCall__Inputs(this);
  }

  get outputs(): HarvestAndCompoundCall__Outputs {
    return new HarvestAndCompoundCall__Outputs(this);
  }
}

export class HarvestAndCompoundCall__Inputs {
  _call: HarvestAndCompoundCall;

  constructor(call: HarvestAndCompoundCall) {
    this._call = call;
  }
}

export class HarvestAndCompoundCall__Outputs {
  _call: HarvestAndCompoundCall;

  constructor(call: HarvestAndCompoundCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}
