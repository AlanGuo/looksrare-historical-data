// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("apr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalLooksStaked", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get apr(): BigDecimal {
    let value = this.get("apr");
    return value!.toBigDecimal();
  }

  set apr(value: BigDecimal) {
    this.set("apr", Value.fromBigDecimal(value));
  }

  get totalLooksStaked(): BigInt {
    let value = this.get("totalLooksStaked");
    return value!.toBigInt();
  }

  set totalLooksStaked(value: BigInt) {
    this.set("totalLooksStaked", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get looksReward(): string | null {
    let value = this.get("looksReward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set looksReward(value: string | null) {
    if (!value) {
      this.unset("looksReward");
    } else {
      this.set("looksReward", Value.fromString(<string>value));
    }
  }

  get feeSharingReward(): string | null {
    let value = this.get("feeSharingReward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set feeSharingReward(value: string | null) {
    if (!value) {
      this.unset("feeSharingReward");
    } else {
      this.set("feeSharingReward", Value.fromString(<string>value));
    }
  }
}

export class LooksReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("apr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("looksRewardsPerBlock", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LooksReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LooksReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LooksReward", id.toString(), this);
    }
  }

  static load(id: string): LooksReward | null {
    return changetype<LooksReward | null>(store.get("LooksReward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get apr(): BigDecimal {
    let value = this.get("apr");
    return value!.toBigDecimal();
  }

  set apr(value: BigDecimal) {
    this.set("apr", Value.fromBigDecimal(value));
  }

  get looksRewardsPerBlock(): BigInt {
    let value = this.get("looksRewardsPerBlock");
    return value!.toBigInt();
  }

  set looksRewardsPerBlock(value: BigInt) {
    this.set("looksRewardsPerBlock", Value.fromBigInt(value));
  }

  get reward(): string | null {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reward(value: string | null) {
    if (!value) {
      this.unset("reward");
    } else {
      this.set("reward", Value.fromString(<string>value));
    }
  }
}

export class FeeSharingReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("apr", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("wethRewardsPerBlock", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeSharingReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FeeSharingReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FeeSharingReward", id.toString(), this);
    }
  }

  static load(id: string): FeeSharingReward | null {
    return changetype<FeeSharingReward | null>(
      store.get("FeeSharingReward", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get apr(): BigDecimal {
    let value = this.get("apr");
    return value!.toBigDecimal();
  }

  set apr(value: BigDecimal) {
    this.set("apr", Value.fromBigDecimal(value));
  }

  get wethRewardsPerBlock(): BigInt {
    let value = this.get("wethRewardsPerBlock");
    return value!.toBigInt();
  }

  set wethRewardsPerBlock(value: BigInt) {
    this.set("wethRewardsPerBlock", Value.fromBigInt(value));
  }

  get reward(): string | null {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reward(value: string | null) {
    if (!value) {
      this.unset("reward");
    } else {
      this.set("reward", Value.fromString(<string>value));
    }
  }
}

export class UniswapLooksWeth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UniswapLooksWeth entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UniswapLooksWeth entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UniswapLooksWeth", id.toString(), this);
    }
  }

  static load(id: string): UniswapLooksWeth | null {
    return changetype<UniswapLooksWeth | null>(
      store.get("UniswapLooksWeth", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}
