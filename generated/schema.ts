// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LooksReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewardPerBlockForStaking", Value.fromBigInt(BigInt.zero()));
    this.set("rewardPerBlockForOthers", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LooksReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LooksReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LooksReward", id.toString(), this);
    }
  }

  static load(id: string): LooksReward | null {
    return changetype<LooksReward | null>(store.get("LooksReward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardPerBlockForStaking(): BigInt {
    let value = this.get("rewardPerBlockForStaking");
    return value!.toBigInt();
  }

  set rewardPerBlockForStaking(value: BigInt) {
    this.set("rewardPerBlockForStaking", Value.fromBigInt(value));
  }

  get rewardPerBlockForOthers(): BigInt {
    let value = this.get("rewardPerBlockForOthers");
    return value!.toBigInt();
  }

  set rewardPerBlockForOthers(value: BigInt) {
    this.set("rewardPerBlockForOthers", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class FeeSharingReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("apy", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("rewardWethPerBlock", Value.fromBigInt(BigInt.zero()));
    this.set("looksPriceWethInWei", Value.fromBigInt(BigInt.zero()));
    this.set("totalSharesLooksInWei", Value.fromBigInt(BigInt.zero()));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeSharingReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FeeSharingReward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FeeSharingReward", id.toString(), this);
    }
  }

  static load(id: string): FeeSharingReward | null {
    return changetype<FeeSharingReward | null>(
      store.get("FeeSharingReward", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get apy(): BigDecimal {
    let value = this.get("apy");
    return value!.toBigDecimal();
  }

  set apy(value: BigDecimal) {
    this.set("apy", Value.fromBigDecimal(value));
  }

  get rewardWethPerBlock(): BigInt {
    let value = this.get("rewardWethPerBlock");
    return value!.toBigInt();
  }

  set rewardWethPerBlock(value: BigInt) {
    this.set("rewardWethPerBlock", Value.fromBigInt(value));
  }

  get looksPriceWethInWei(): BigInt {
    let value = this.get("looksPriceWethInWei");
    return value!.toBigInt();
  }

  set looksPriceWethInWei(value: BigInt) {
    this.set("looksPriceWethInWei", Value.fromBigInt(value));
  }

  get totalSharesLooksInWei(): BigInt {
    let value = this.get("totalSharesLooksInWei");
    return value!.toBigInt();
  }

  set totalSharesLooksInWei(value: BigInt) {
    this.set("totalSharesLooksInWei", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UniswapLooksWeth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("looksBalance", Value.fromBigInt(BigInt.zero()));
    this.set("wethBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UniswapLooksWeth entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UniswapLooksWeth entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UniswapLooksWeth", id.toString(), this);
    }
  }

  static load(id: string): UniswapLooksWeth | null {
    return changetype<UniswapLooksWeth | null>(
      store.get("UniswapLooksWeth", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get looksBalance(): BigInt {
    let value = this.get("looksBalance");
    return value!.toBigInt();
  }

  set looksBalance(value: BigInt) {
    this.set("looksBalance", Value.fromBigInt(value));
  }

  get wethBalance(): BigInt {
    let value = this.get("wethBalance");
    return value!.toBigInt();
  }

  set wethBalance(value: BigInt) {
    this.set("wethBalance", Value.fromBigInt(value));
  }
}
